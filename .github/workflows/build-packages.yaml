name: Build packages

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'experimental'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'
      - 'develop'

env:
  PYTHON_VERSION: 3.13

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
      fail-fast: false
    defaults:
      run:
        shell: bash
        working-directory: 'humitifier-scanner'

    steps:
      #
      # Setup
      #
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set file-specific environment variable
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "ARTIFACT_PATH=humitifier-scanner\\dist\\humitifier-scanner.exe" >> $GITHUB_ENV
            echo "BINARY_PATH=.\\\\dist\\\\humitifier-scanner.exe" >> $GITHUB_ENV
          else
            echo "ARTIFACT_PATH=humitifier-scanner/dist/humitifier-scanner" >> $GITHUB_ENV
            echo "BINARY_PATH=./dist/humitifier-scanner" >> $GITHUB_ENV
          fi

      - uses: actions/setup-python@v5
        with:
           python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        if: matrix.os != 'windows-latest'
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: humitifier-scanner/.venv
          key: venv-${{ matrix.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('humitifier-scanner/poetry.lock') }}

      - name: Install dependencies
        if: matrix.os == 'windows-latest' || steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --only=main,standalone,dev --compile --no-interaction

      #
      # Build
      #

      - name: Run PyInstaller
        run: |
          source $VENV
          pyinstaller -F --clean -n humitifier-scanner src/cli.py

      - name: Test binary
        run: |
          ${{ env.BINARY_PATH }} print_config
          ${{ env.BINARY_PATH }} hostname

      #
      # Upload
      #

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-build-${{ matrix.os }}
          path: ${{ env.ARTIFACT_PATH }}


  build-legacy-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build build container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: humitifier-scanner/build-support/Ubuntu2004.Dockerfile
          push: false
          tags: humitifier/ubuntu2004-build:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build package
        run: |
          docker run --rm -w /app -v "${{ github.workspace }}/dist:/dist" humitifier/ubuntu2004-build:latest bash -c "poetry run -- pyinstaller -F --clean -n humitifier-scanner src/cli.py --distpath /dist"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-build-ubuntu-20.04
          path: dist/humitifier-scanner


  package-linux:
    runs-on: ubuntu-latest
    needs:
      - build
      - build-legacy-ubuntu
    strategy:
      matrix:
        package: ['deb', 'rpm']
        source: ['latest', '20.04']
    steps:
      #
      # Setup
      #
      - name: Set up ref info
        id: ref-info
        run: |
          if [ "${{ github.ref_type }}" = "branch" ]; then
            echo "ref_name=0.0.0-dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            echo "ref_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "ref_name=unknown" >> $GITHUB_ENV
          fi

      - name: Install RPM support
        run: DEBIAN_FRONTEND=noninteractive sudo apt-get install -y rpm
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Install FPM
        run: gem install fpm

      - name: Download build executable
        uses: actions/download-artifact@v4
        with:
          name: pyinstaller-build-ubuntu-${{ matrix.source }}

      #
      # Package
      #

      - name: Set correct permissions
        run: |
          chmod +x humitifier-scanner

      - name: Package
        run: |
          fpm \
          -s dir -t ${{ matrix.package }} \
          -p humitifier-scanner.${{ env.ref_name }}.${{ matrix.package }} \
          --name humitifier-scanner \
          --license GPL-3.0 \
          --version ${{ env.ref_name }} \
          --architecture native \
          --depends bash --depends python3 \
          --description "Scan the universe" \
          --url "https://github.com/CentreForDigitalHumanities/humitifier" \
          --maintainer "Humanities IT System Team <systemteam.gw@uu.nl>" \
          humitifier-scanner=/usr/bin/humitifier-scanner

      #
      # Upload
      #

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.package }}-${{ matrix.source }}
          path: humitifier-scanner.${{ env.ref_name }}.${{ matrix.package }}
